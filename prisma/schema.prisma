// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  name          String?
  username      String?
  password      String
  email         String    @unique
  github_id     Int?       @unique
  avatar_url    String?
  session       Session[]
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt

  roles         UserRole[]
  userVerify    UserVerify?
  userAccounts  UserAccount[]
}

model UserVerify {
   id             String     @id @default(uuid())
   user           User?      @relation(fields: [userId], references: [id])
   userId         String     @unique
   token          String
   created_at     DateTime   @default(now())
   updated_at     DateTime   @updatedAt
   verified_at    DateTime?  
}

model Role {
  id        String     @id @default(uuid())
  name      String     @unique
  userRoles UserRole[]
}

model UserRole {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model Session {
  id            Int      @id @default(autoincrement())
  user_id       String?
  user          User?    @relation(fields: [user_id], references: [id])
  access_token  String?  @unique
  session_token String   @unique
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  ip            String?
  country       String?

  @@index([user_id])
}

model AccountType {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  accounts Account[]
  createdAt       DateTime    @default(now())
}

model Account {
  id              Int             @id @default(autoincrement())
  name            String
  description     String?
  accountTypeId   Int
  balance         Float           @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now())

  accountType     AccountType     @relation(fields: [accountTypeId], references: [id], onDelete: Cascade)
  transactions    Transaction[]
  userAccounts    UserAccount[]
}

model AccountingCategory {
  id            Int               @id @default(autoincrement())
  name          String
  type          IncomeOrExpense
  createdAt     DateTime          @default(now())

  transactions  Transaction[]
}

enum IncomeOrExpense {
  Income
  Expense
}

model Transaction {
  id                        Int                   @id @default(autoincrement())
  accountId                 Int
  accountingCategoryId      Int
  amount                    Float
  type                      IncomeOrExpense
  description               String?
  createdAt                 DateTime              @default(now())

  account                   Account               @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountingCategory        AccountingCategory    @relation(fields: [accountingCategoryId], references: [id], onDelete: Cascade)
}

model UserAccount {
  id        String     @id @default(uuid())
  userId    String 
  accountId Int
  role      String

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  account   Account     @relation(fields: [accountId], references: [id], onDelete: Cascade)
}
